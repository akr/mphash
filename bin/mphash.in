#!/usr/bin/env ruby

class String
  alias bytesize size unless "".respond_to? :bytesize
  unless "".respond_to? :ord
    def ord() self[0] end
  end
end

require 'mphash'
require 'optparse'
require 'erb'
require 'enumerator'

SECTIONS = {}
section_name = nil
DATA.each_line {|line|
  if %r{^\/\* section: (.*) \*\/\n} =~ line
    section_name = $1
    SECTIONS[section_name] = ''
  elsif section_name == nil
    next
  else
    if !SECTIONS[section_name].empty? || /\A\s*\z/ !~ line
      SECTIONS[section_name] << line
    end
  end
}

C_MNEMONIC_ESCAPE = {
  't' => "\t",
  'n' => "\n",
  'r' => "\r",
  'f' => "\f",
  'b' => "\b",
  'a' => "\a",
  'v' => "\v"
}

SRC_UNESCAPE = {}
SRC_UNESCAPE.update C_MNEMONIC_ESCAPE
SRC_UNESCAPE['e'] = "\e"

0.upto(0xff) {|c|
  s = [c].pack("C")
  oct = "%03o" % c
  SRC_UNESCAPE[oct] = s
  SRC_UNESCAPE[oct[1,2]] = s if /\A0/ =~ oct
  SRC_UNESCAPE[oct[2,1]] = s if /\A00/ =~ oct
  hex = "x%02x" % c
  SRC_UNESCAPE[hex] = s
}
SRC_UNESCAPE['"'] = '"'
SRC_UNESCAPE['\\'] = '\\'

QUOTED_STRING_PAT = /"((?:[^\\"]|\\#{Regexp.union *SRC_UNESCAPE.keys})*)"/o
def str_undump(str)
  if /\A#{QUOTED_STRING_PAT}\z/o !~ str
    raise "invalid quoting: #{str.inspect}"
  end
  key = $1.gsub(/[^\\"]|\\(#{Regexp.union *SRC_UNESCAPE.keys})/o) {
    $1 ? SRC_UNESCAPE[$1] : $&
  }
end

C_ESC = {
  "\\" => "\\\\",
  '"' => '\"',
}
C_MNEMONIC_ESCAPE.each {|mnemonic, ch| 
  C_ESC[ch] = "\\#{mnemonic}"
}
0x00.upto(0x1f) {|ch| C_ESC[[ch].pack("C")] ||= "\\%03o" % ch }
0x7f.upto(0xff) {|ch| C_ESC[[ch].pack("C")] = "\\%03o" % ch }
C_ESC_PAT = Regexp.union(*C_ESC.keys)
def c_esc(str)
  '"' + str.gsub(C_ESC_PAT) { C_ESC[$&] } + '"'
end

C_CHAR_ESC = {
  "0".ord => "'\\0'",
  "\\".ord => "'\\\\'",
  '\''.ord => "'\\\''",
}
C_MNEMONIC_ESCAPE.each {|mnemonic, ch| 
  C_CHAR_ESC[ch.ord] = "'\\#{mnemonic}'"
}
0x00.upto(0x1f) {|ch| C_CHAR_ESC[ch] ||= "'\\%03o'" % ch }
0x20.upto(0x7f) {|ch| C_CHAR_ESC[ch] ||= "'#{[ch].pack("C")}'" }
0x7f.upto(0xff) {|ch| C_CHAR_ESC[ch] = "'\\%03o'" % ch }
def c_char_esc(str)
  str.unpack("C*").map {|c| C_CHAR_ESC[c] }
end

def parse_anyfile(io, fieldnum=nil)
  result = []
  lineno = 0
  io.each_line {|line|
    lineno += 1
    next if /\A\s*\z/ =~ line
    str = line.dup
    fields = []
    loop {
      str.sub!(/\A\s*/, '')
      if str.empty?
        break
      elsif /\A"/ =~ str
        if /\A#{QUOTED_STRING_PAT}/ !~ str
          error "#{lineno}: unexpected line format: #{line.inspect}"
        end
        str = $'
        fields << str_undump($&)
      else
        /\A\S+/ =~ str
        fields << $&
        str = $'
      end
    }
    if fieldnum && fieldnum != fields.length
      if fieldnum < fields.length
        error "#{lineno}: fields lacks: #{line.inspect}"
      else
        error "#{lineno}: extra fields: #{line.inspect}"
      end
    end
    fields.map! {|str|
      if /\A"/ =~ str
        str_undump(str)
      else
        str
      end
    }
    result << fields
  }
  result
end

def parse_keyfile(io)
  parse_anyfile(io, 1).map {|fields| fields.first }
end

def parse_dictfile(io)
  parse_anyfile(io, 2)
end

def gen_output(code)
  if !$opt_o
    print code
    return
  end
  n = 1
  begin
    tmpname = "#{$opt_o}.tmp#{n}"
    f = File.open(tmpname, File::WRONLY|File::CREAT|File::EXCL)
  rescue Errno::EEXIST
    n += 1
    retry
  end
  begin
    f << code
  ensure
    f.close
  end
  File.rename(tmpname, $opt_o)
end

def expand_funcdata_template(linkage, name, template_name, mphf)
  range = mphf.instance_variable_get(:@range)
  hashtuple = mphf.instance_variable_get(:@hashtuple)
  salts = hashtuple.instance_variable_get(:@salt)
  g = mphf.instance_variable_get(:@g)
  packed_g = []
  g.each_slice(16) {|vs|
    vs << 0 while vs.length < 16
    vs.reverse!
    packed_g << vs.inject(0) {|r, v| r * 4 + v }
  }
  formatted_g = packed_g.map {|v| "0x%x," % v }
  formatted_g.last.sub!(/,/, '')
  rs = mphf.instance_variable_get(:@rs)
  formatted_rs = rs.map {|v| "0x%x," % v }
  formatted_rs << "0" if formatted_rs.empty?
  formatted_rs.last.sub!(/,/, '')
  rb = mphf.instance_variable_get(:@rb)
  formatted_rb = rb.map {|v| "0x%x," % v }
  formatted_rb << "0" if formatted_rb.empty?
  formatted_rb.last.sub!(/,/, '')

  ERB.new(SECTIONS[template_name], nil, '%').result(binding)
end

def expand_tabledata_template(linkage, name, template_name, hash_param_name, mphf, dict)
  offsets = []
  off = 0
  dict.each {|k, v|
    offsets << off
    off += k.bytesize
    off += v.bytesize
  }
  entries = []
  dict.each_with_index {|(k, v), src_index|
    hash_index, full_hs = mphf.mphf_with_hashes(k)
    entries[hash_index] = [full_hs[0], offsets[src_index], k.bytesize, v.bytesize]
  }
  ERB.new(SECTIONS[template_name], nil, '%').result(binding)
end

def expand_template(linkage, name, template_name, hash={})
  code = ''
  hash.each {|k, v|
    code << "#{k} = hash[#{k.inspect}]\n"
  }
  code << 'ERB.new(SECTIONS[template_name], nil, "%").result(binding)'
  eval code
end

$opt_f = false
$opt_t = false

$opt_c = false
$opt_d = false
$opt_H = false

# --static is intended to generate code fragments appropriate to include them.
# * All function definitions are static.
# * No #include directive.
#   So generated code is filename independent.
#   However client code need to include fragments in appropriate order.
$opt_static = false

$opt_o = nil
$opt_n = nil

op = OptionParser.new
op.banner = 'Usage: mphash [options] [keyfile/dictfile]'
op.def_option('-h', '--help', 'show this message') { puts op; exit 0 }
op.def_option('-f', '--function', 'generate hash function only') { $opt_f = true }
op.def_option('-t', '--table', 'generate hash table') { $opt_t = true }
op.def_option('-d', '--data', 'generate data only') { $opt_d = true }
op.def_option('-c', '--code', 'generate common code for data by -d') { $opt_c = true }
op.def_option('-H', '--header', 'generate header file') { $opt_H = true }
op.def_option('--static', 'make all function definitions static') { $opt_static = true }
op.def_option('-o OUTPUT', '--output OUTPUT', 'specify output filename') {|arg| $opt_o = arg }
op.def_option('-n NAME', '--name NAME', 'specify function/data name') {|arg| $opt_n = arg }
op.parse!

def error(message)
  STDERR.puts message
  exit 1
end

if $opt_f && $opt_t
  error "exclusive options given: -f and -t"
end

header_linkage = $opt_static ? 'static' : 'extern'
code_linkage = $opt_static ? 'static' : ''

if $opt_f || $opt_t || true
  code = "/* This file is public domain. */\n\n"
  if $opt_c
    if $opt_H
      if $opt_o && File.basename($opt_o) != 'mphash.h'
        warn "common header name is not 'mphash.h'"
      end
      code << "\#ifndef MPHASH_H\n" if !$opt_static
      code << "\#define MPHASH_H\n\n" if !$opt_static
      code << SECTIONS.fetch("common header")
      code << expand_template(header_linkage, nil, 'mphash utility declations')
      code << "\#endif\n" if !$opt_static
    else
      code << "\#include \"mphash.h\"\n\n" if !$opt_static
      code << MPHash::JENKINS_LOOKUP3
      code << expand_template(code_linkage, nil, 'mphash utility definitions')
    end
  elsif $opt_f
    if $opt_d
      name = $opt_n || 'mphf_param'
    else
      name = $opt_n || 'mphf'
    end
    if $opt_H
      if $opt_d
        code << "\#include \"mphash.h\"\n\n" if !$opt_static
        code << expand_template(header_linkage, name, 'hash parameter declaration')
      else
        code << expand_template(header_linkage, name, 'specific hash function declaration')
      end
    else
      keys = parse_keyfile(ARGF)
      mphf = MPHash::MPHF.new(keys)
      if $opt_d
        code << "\#include \"mphash.h\"\n\n" if !$opt_static
        code << expand_funcdata_template(code_linkage, name, 'hash parameter definition', mphf)
      else
        code << SECTIONS.fetch("common header")
        code << expand_funcdata_template("static", "mphf_param", 'hash parameter definition', mphf)
        code << MPHash::JENKINS_LOOKUP3
        code << expand_template("static", nil, 'mphash utility definitions')
        code << expand_template(code_linkage, name, 'specific hash function definition', :param_name => "&mphf_param")
      end
    end
  elsif $opt_t
    if $opt_d
      name = $opt_n || 'mpht_param'
    else
      name = $opt_n || 'mpht'
    end
    if $opt_H
      if $opt_d
        code << "\#include \"mphash.h\"\n\n" if !$opt_static
        code << expand_template(header_linkage, name, 'hash table declaration')
      else
        code << expand_template(header_linkage, name, 'specific hash table declaration')
      end
    else
      dict = parse_dictfile(ARGF)
      keys = dict.map {|fields| fields[0] }
      mphf = MPHash::MPHF.new(keys)
      if $opt_d
        code << "\#include \"mphash.h\"\n\n" if !$opt_static
        code << expand_funcdata_template("static", 'mphf_param', 'hash parameter definition', mphf)
        code << expand_tabledata_template(code_linkage, name, 'hash table definition', '&mphf_param', mphf, dict)
      else
        code << SECTIONS.fetch("common header")
        code << expand_funcdata_template("static", "mphf_param", 'hash parameter definition', mphf)
        code << expand_tabledata_template("static", "mpht_param", 'hash table definition', '&mphf_param', mphf, dict)
        code << MPHash::JENKINS_LOOKUP3
        code << expand_template("static", nil, 'mphash utility definitions')
        code << expand_template(code_linkage, name, 'specific hash table definition', :table_name => "&mpht_param")
      end
    end
  else
    dict = parse_anyfile(ARGF)
    numfields = 0
    dict.each {|fields|
      numfields = fields.length if numfields < fields.length
      fields << '' if fields.length < 2
    }
    mphf = MPHash::MPHF.new(dict.map {|fields| fields[0] })
    code << SECTIONS.fetch("common header")
    code << expand_funcdata_template("static", "mphf_param", 'hash parameter definition', mphf)
    code << expand_tabledata_template("static", "mpht_param", 'hash table definition', '&mphf_param', mphf, dict)
    code << MPHash::JENKINS_LOOKUP3
    code << expand_template("static", nil, 'mphash utility definitions')
    code << expand_template("", 'mphf', 'specific hash function definition', :param_name => "&mphf_param")
    code << expand_template("", 'mpht', 'specific hash table definition', :table_name => "&mpht_param")
    code << expand_template("", nil, 'test command main', :dict => dict, :numfields => numfields)
  end
  gen_output(code)
end

__END__

/* section: common header */

#include <stdint.h>     /* for uint32_t */
#include <stddef.h>     /* for size_t */

#define MPHASH_NOT_A_KEY (~(uint32_t)0)

typedef struct {
  uint32_t range;
  uint32_t salt0, salt1, salt2;
  const uint32_t *g;
  const uint32_t *rs;
  const unsigned char *rb;
} mphash_func_t;

typedef struct {
  uint32_t keyhash;
  size_t offset;
  size_t key_size;
  size_t val_size;
} mphash_table_entry_t;

typedef struct {
  const mphash_func_t *hash_param;
  unsigned long num_entries;
  const mphash_table_entry_t *entries;
  const char *data;
} mphash_table_t;

/* section: hash parameter declaration */

<%=linkage%>
const mphash_func_t <%=name%>;

/* section: hash parameter definition */

static const uint32_t <%=name%>_g[] = {
% formatted_g.each_slice(6) {|vs|
    <%= vs.join('') %>
% }
};

static const uint32_t <%=name%>_rs[] = {
% formatted_rs.each_slice(6) {|vs|
    <%= vs.join('') %>
% }
};

static const unsigned char <%=name%>_rb[] = {
% formatted_rb.each_slice(7) {|vs|
    <%= vs.join('') %>
% }
};

<%=linkage%>
const mphash_func_t <%=name%> = {
  <%= range %>,
  <%= salts[0] %>, <%= salts[1] %>, <%= salts[2] %>,
  <%=name%>_g,
  <%=name%>_rs,
  <%=name%>_rb
};

/* section: mphash utility declations */

<%=linkage%>
uint32_t mphash_generic(
   const void *key, size_t length, const mphash_func_t *param,
   uint32_t *hash0_ret, uint32_t *hash1_ret, uint32_t *hash2_ret);

<%=linkage%>
const void *mphash_table_lookup(const void *key, size_t length,
  const mphash_table_t *table, size_t *value_length);

/* section: mphash utility definitions */

/*---------------------------------------------------------------------*/
/* minimal perfect hash function, by Tanaka Akira 2008, Public Domain. */

#define RANK_BLOCKSIZE <%=MPHash::MPHF::RANK_BLOCKSIZE%>
#define RANK_SMALLBLOCKSIZE <%=MPHash::MPHF::RANK_SMALLBLOCKSIZE%>

#define GCC_VERSION_BEFORE(major, minor, patchlevel) \
  (defined(__GNUC__) && !defined(__INTEL_COMPILER) && \
   ((__GNUC__ < (major)) ||  \
    (__GNUC__ == (major) && __GNUC_MINOR__ < (minor)) || \
    (__GNUC__ == (major) && __GNUC_MINOR__ == (minor) && __GNUC_PATCHLEVEL__ < (patchlevel))))

#if defined(__GNUC__) && !GCC_VERSION_BEFORE(3,4,0)
# define popcount(w) __builtin_popcountl(w)
#else
int popcount(uint32_t x) /* from Hacker's Delight by Henry S. Warren, Jr. */
{
  x = x - ((x >> 1) & 0x55555555);
  x = (x & 0x33333333) + ((x >> 2) & 0x33333333);
  x = (x + (x >> 4)) & 0x0f0f0f0f;
  x = x + (x >> 8);
  x = x + (x >> 16);
  return x & 0x3f;
}
#endif

<%=linkage%>
uint32_t mphash_generic(
  const void *key, size_t length, const mphash_func_t *param,
  uint32_t *hash0_ret, uint32_t *hash1_ret, uint32_t *hash2_ret)
{
  uint32_t fullhash0, fullhash1, fullhash2;
  uint32_t h[3];
  uint32_t ph, mph, a, b, c, u0, u1;
  int i, g[3];
  fullhash0 = param->salt0;
  fullhash1 = param->salt1;
  hashlittle2(key, length, &fullhash0, &fullhash1);
  fullhash2 = hashlittle(key, length, param->salt2);
  if (hash0_ret) *hash0_ret = fullhash0;
  if (hash1_ret) *hash1_ret = fullhash1;
  if (hash2_ret) *hash2_ret = fullhash2;
  h[0] = fullhash0 % param->range;
  h[1] = (fullhash1 % param->range) + param->range;
  h[2] = (fullhash2 % param->range) + param->range*2;
  g[0] = (param->g[h[0] / 16] >> (2 * (h[0] % 16))) & 3;
  g[1] = (param->g[h[1] / 16] >> (2 * (h[1] % 16))) & 3;
  g[2] = (param->g[h[2] / 16] >> (2 * (h[2] % 16))) & 3;
  i = g[0] + g[1] + g[2];
  ph = h[i % 3];
  if (g[i % 3] == 3)
    return MPHASH_NOT_A_KEY;
  a = ph / RANK_BLOCKSIZE;
  b = ph % RANK_BLOCKSIZE;
  c = b % RANK_SMALLBLOCKSIZE;
  b = b / RANK_SMALLBLOCKSIZE;
  mph = 0;
  if (a != 0)
    mph = param->rs[a-1];
  if (b != 0)
    mph += param->rb[a*(RANK_BLOCKSIZE/RANK_SMALLBLOCKSIZE-1)+b-1];
  if (c != 0) {
    i = ph / RANK_SMALLBLOCKSIZE;
    u0 = param->g[i*2];
    u1 = 0;
    if (c < 16)
      u0 &= (1 << (c*2)) - 1;
    else if (c != 16) {
      u1 = param->g[i*2+1];
      u1 &= (1 << ((c-16)*2)) - 1;
    }
    u0 = (u0 & 0x55555555) & (u0 >> 1);
    u1 = (u1 & 0xaaaaaaaa) & (u1 << 1);
    mph += c - popcount(u0|u1);
  }
  return mph;
}

#include <string.h>     /* for memcmp */

<%=linkage%>
const void *mphash_table_lookup(const void *key, size_t length,
  const mphash_table_t *table, size_t *value_length)
{
  uint32_t index, hash;
  const mphash_table_entry_t *entry;
  index = mphash_generic(key, length, table->hash_param, &hash, NULL, NULL);
  if (index == MPHASH_NOT_A_KEY)
    return NULL;
  entry = &table->entries[index];
  if (hash != entry->keyhash || length != entry->key_size)
    return NULL;
  if (memcmp(key, &table->data[entry->offset], length) != 0)
    return NULL;
  if (value_length)
    *value_length = entry->val_size;
  return &table->data[entry->offset+entry->key_size];
}

/*---------------------------------------------------------------------*/

/* section: specific hash function declaration */

#include <stddef.h>
#include <stdint.h>

<%=linkage%>
uint32_t <%=name%>(const void *key, size_t length);

/* section: specific hash function definition */

<%=linkage%>
uint32_t <%=name%>(const void *key, size_t length)
{
  return mphash_generic(key, length, <%=param_name%>, NULL, NULL, NULL);
}

/* section: hash table declaration */

<%=linkage%>
const mphash_table_t <%=name%>;

/* section: hash table definition */

static const mphash_table_entry_t <%=name%>_entries[] = {
% entries.each {|keyhash, offset, key_size, val_size|
  { <%="0x%x" % keyhash%>, <%="0x%0x" % offset%>, <%=key_size%>, <%=val_size%> },
% }
};

static const char <%=name%>_data[] = {
% dict.each {|key, val|
%   c_char_esc(key).each_slice(8) {|chs|
<%=chs.map {|ch| "#{ch}," }.join%>
%   }
%   c_char_esc(val).each_slice(8) {|chs|
  <%=chs.map {|ch| "#{ch}," }.join%>
%   }
% }
};

<%=linkage%>
const mphash_table_t <%=name%> = {
  <%=hash_param_name%>,
  <%=entries.length%>,
  <%=name%>_entries,
  <%=name%>_data
};

/* section: specific hash table declaration */

#include <stddef.h>
#include <stdint.h>

<%=linkage%>
void *<%=name%>(const void *key, size_t length, size_t *value_length);

/* section: specific hash table definition */

<%=linkage%>
const void *<%=name%>(const void *key, size_t length, size_t *value_length)
{
  return mphash_table_lookup(key, length, <%=table_name%>, value_length);
}

/* section: test command main */

typedef struct {
  size_t key_len;
  char *key;
  size_t val_len;
  char *val;
} mphash_pair_t;

mphash_pair_t dict[] = {
% dict.each {|key, val|
  { <%=key.bytesize%>, <%=c_esc(key)%>, <%=val ? val.bytesize : 0%>, <%=val ? c_esc(val) : "NULL"%> },
% }
};

#define NUMFIELDS <%=numfields%>
#define NUMKEYS <%=dict.length%>

#include <stdlib.h>     /* for exit */
#include <unistd.h>     /* for getopt */
#include <string.h>     /* for strlen */
#include <stdio.h>

void usage(int status)
{
  fputs(
"usage: mphash-test-commnad [options]\n"
"option: -h : print this message\n"
"        -l : list keys and hash values (default action for empty arguments)\n"
"        -v : generated hash validation\n"
"        -q arg1 arg2 ... : query hash value (default action for non-empty arguments)\n"
        , stdout);
  exit(status);
}

void showstr(FILE *fp, const char *str, size_t len)
{
  size_t i;
  fputc('"', fp);
  for (i = 0; i < len; i++) {
    int c = (unsigned char)str[i];
    switch (c) {
      case '"': fputs("\\\"", fp); continue;
      case '\\': fputs("\\\\", fp); continue;
      case '\t': fputs("\\t", fp); continue;
      case '\n': fputs("\\n", fp); continue;
      case '\r': fputs("\\r", fp); continue;
      case '\f': fputs("\\f", fp); continue;
      case '\b': fputs("\\b", fp); continue;
      case '\a': fputs("\\a", fp); continue;
      case '\v': fputs("\\v", fp); continue;
      case '\x1b': fputs("\\e", fp); continue;
    }
    if (c < 0x20 || 0x7e < c) {
      fprintf(fp, "\\%03o", c);
    }
    else {
      fputc(c, fp);
    }
  }
  fputc('"', fp);
}

uint32_t check_mphf(const void *key, size_t length)
{
  uint32_t h = mphf(key, length);
  if (NUMKEYS <= h && h != MPHASH_NOT_A_KEY) {
    fprintf(stderr, "[bug] hash value out of range : %u ", h);
    showstr(stderr, key, length);
    fputc('\n', stderr);
  }
  return h;
}


void list(void)
{
  unsigned long l;
  for (l = 0; l < NUMKEYS; l++) {
    printf("%u ", check_mphf(dict[l].key, dict[l].key_len));
    showstr(stdout, dict[l].key, dict[l].key_len);
#if 1 < NUMFIELDS
    putchar(' ');
    showstr(stdout, dict[l].val, dict[l].val_len);
#endif
    putchar('\n');
  }
}

void validation(void)
{
  static mphash_pair_t *list[NUMKEYS];
  int fail = 0;
  unsigned long l;
  for (l = 0; l < NUMKEYS; l++) {
    uint32_t h = mphf(dict[l].key, dict[l].key_len);
    if (NUMKEYS <= h) {
      fail = 1;
      printf("invalid hash value: %u ", h);
      showstr(stdout, dict[l].key, dict[l].key_len);
      putchar('\n');
      continue;
    }
    if (list[h]) {
      fail = 1;
      printf("collision found: %u ", h);
      showstr(stdout, list[h]->key, list[h]->key_len);
      putchar(' ');
      showstr(stdout, dict[l].key, dict[l].key_len);
      putchar('\n');
    }
    list[h] = &dict[l];
  }
  if (!fail) {
    puts("ok");
  }
}

void query(int argc, char **argv)
{
  int i;
  for (i = 0; i < argc; i++) {
    const void *key = argv[i];
    size_t len = strlen(argv[i]);
    printf("%u", check_mphf(key, len));
#if 1 < NUMFIELDS
    {
      size_t value_len;
      const void *value = mpht(key, len, &value_len);
      putchar(' ');
      if (value)
        showstr(stdout, value, value_len);
      else
        fputs("not found", stdout);
    }
#endif
    putchar('\n');
  }
}

int main(int argc, char **argv)
{
  int c;

  while ((c = getopt(argc, argv, "hlvq")) != -1) {
    switch(c) {
      case 'h':
        usage(0);

      case '?':
        exit(1);

      case 'l': list(); exit(0);
      case 'v': validation(); exit(0);
      case 'q': query(argc-optind, argv+optind); exit(0);
    }
  }

  if (optind < argc)
    query(argc-optind, argv+optind);
  else
    list();
  return 0;
}
